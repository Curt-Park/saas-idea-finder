"""SaaS Idea Finder Crew.

Orchestrates all agents to perform comprehensive SaaS idea analysis.
"""

import os
from typing import Any

from crewai import Crew, Process
from dotenv import load_dotenv

from ..agents.competitor_analyzer import CompetitorAnalyzerAgent
from ..agents.market_analyzer import MarketAnalyzerAgent
from ..agents.painpoint_collector import PainpointCollectorAgent
from ..agents.proposal_writer import ProposalWriterAgent
from ..agents.tech_feasibility_analyzer import TechFeasibilityAnalyzerAgent


class SaasIdeaFinderCrew:
    def __init__(self):
        # Load environment variables
        load_dotenv()

        # Check OpenAI API key
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY environment variable is not set.")

        # Initialize agents
        self.painpoint_collector = PainpointCollectorAgent(self.openai_api_key)
        self.market_analyzer = MarketAnalyzerAgent(self.openai_api_key)
        self.tech_feasibility_analyzer = TechFeasibilityAnalyzerAgent(self.openai_api_key)
        self.proposal_writer = ProposalWriterAgent(self.openai_api_key)
        self.competitor_analyzer = CompetitorAnalyzerAgent(self.openai_api_key)

        # Crew setup
        self.crew = Crew(
            agents=[
                self.painpoint_collector.agent,
                self.market_analyzer.agent,
                self.tech_feasibility_analyzer.agent,
                self.proposal_writer.agent,
                self.competitor_analyzer.agent,
            ],
            tasks=[],  # Created dynamically
            process=Process.sequential,
            verbose=True,
        )

    def analyze_saas_idea(self, topic: str) -> dict[str, Any]:
        """Execute comprehensive SaaS idea analysis.

        Args:
            topic: Topic/idea to analyze

        Returns:
            Comprehensive analysis results
        """
        print(f"🚀 Starting SaaS idea analysis: {topic}")

        # Step 1: Painpoint collection
        print("📊 Step 1: Collecting painpoints...")
        painpoint_result = self.painpoint_collector.collect_painpoints(topic)

        # Step 2: Market analysis
        print("📈 Step 2: Performing market analysis...")
        market_result = self.market_analyzer.analyze_market(painpoint_result)

        # Step 3: Technical feasibility analysis
        print("⚙️ Step 3: Analyzing technical feasibility...")
        tech_result = self.tech_feasibility_analyzer.analyze_tech_feasibility(market_result)

        # Step 4: Proposal writing
        print("📝 Step 4: Writing proposal...")
        analysis_data = {
            "painpoint_analysis": painpoint_result,
            "market_analysis": market_result,
            "tech_analysis": tech_result,
        }
        proposal_result = self.proposal_writer.write_proposal(analysis_data)

        # Step 5: Competitor analysis
        print("🏢 Step 5: Analyzing competitors...")
        competitor_result = self.competitor_analyzer.analyze_competitors(proposal_result)

        # Return comprehensive results
        final_result = {
            "topic": topic,
            "painpoint_analysis": painpoint_result,
            "market_analysis": market_result,
            "tech_feasibility": tech_result,
            "proposal": proposal_result,
            "competitor_analysis": competitor_result,
            "status": "completed",
        }

        print("✅ SaaS idea analysis completed!")
        return final_result

    def generate_summary_report(self, analysis_result: dict[str, Any]) -> str:
        """Generate summary report based on analysis results.

        Args:
            analysis_result: Analysis results

        Returns:
            Summary report
        """
        topic = analysis_result.get("topic", "Unknown")

        report = f"""
# SaaS Idea Analysis Report

## 📋 Analysis Overview
- **Topic**: {topic}
- **Analysis Date**: {analysis_result.get("status", "Completed")}

## 🎯 Key Findings

### 1. Painpoint Analysis
{analysis_result.get("painpoint_analysis", {}).get("painpoints", "Analyzing...")}

### 2. Market Opportunities
{analysis_result.get("market_analysis", {}).get("market_analysis", "Analyzing...")}

### 3. Technical Feasibility
{analysis_result.get("tech_feasibility", {}).get("tech_feasibility", "Analyzing...")}

### 4. Business Proposal
{analysis_result.get("proposal", {}).get("proposal", "Analyzing...")}

### 5. Competitive Environment
{analysis_result.get("competitor_analysis", {}).get("competitor_analysis", "Analyzing...")}

## 🚀 Next Steps Recommendations
1. Create detailed technical specifications
2. Develop MVP development plan
3. Conduct initial customer interviews
4. Start prototype development

---
*This report is generated by AI-based analysis. Additional verification is required for actual business decisions.*
        """

        return report
